_sectioning_: partially applying infix operators

```haskell
squared = (^2)
plusThree = (+3)
decrement = subtract 1
```

> Polymorphic type variables give us the ability to implement ex-
> pressions that can accept arguments and return results of different
> types without having to write variations on the same expression for
> each type. It would be inefficient if you were doing arithmetic and
> had to write the same code over and over for different numeric types.

- page 137

Two types of polymorphism:

- parametric polymorphism: `a -> a`
  - unconstrained
  - uses type variables
  - concrete types do not matter
- constrained polymorphism: `Num a => a -> a` 
  - puts typeclass constraints on the type variables
  - limits the set of potential types that the type variable can resolve to
- parametricity: the behavior of the function with respect to the types of its
  inputs is uniform.

> Typeclasses and types in Haskell are, in a sense, opposites. Where a
> declaration of a type defines how that type in particular is created,
> a declaration of a typeclass defines how a set of types are consumed
> or used in computations.

- page 195

Common typeclasses

- `Bounded`: for types that have an upper and lower bound
- `Enum`: for types that can be enumerated
- `Eq`: for types that can be tested for equality
- `Ord`: for types that have a sequential order
- `Show`: for types that have a string representation

Defining the `Eq` typeclass

```haskell
class Eq a where
  (==) :: a -> a -> Bool
  (/=) :: a -> a -> Bool
```

Writing a typeclass instance

```haskell
data Trivial = Trivial'

instance Eq Trivial where
  Trivial' == Trivial' = True
```

partial function: a function that does not handle all possible inputs

Typeclass with type parameter

```haskell
data Foo a = Foo a

instance Eq a => Eq (Foo a) where
  (==) (Foo x1) (Foo x2) = x1 == x2
```

The `Real` typeclass requires an instance of `Num`.
`Real` cannot override the methods of `Num`.
`Real` can only add to the methods of `Num`.

Summary

- Types describe what the data is.
- Typeclasses describe how the data is consumed.
- A type has an instances of a typeclass.
- An instance of a typeclass defines how the methods of the typeclass operate on
  a value of the type.
- Parametric polymorphism is the use of unconstrained type variables.
- Parametricity refers to functions whose behavior is uniform without regard to
  the type of its arguments.
- Constrained (ad-hoc) polymorphism is the use of typeclasses to make 
  requirements about a value.
- Constrained polymorphism narrows the possible concrete types of a value from
  anything to a set of types.
- Concrete types are monomorphic.
